&НаКлиенте
Процедура фФильтрГодВыпускаПриИзменении(Элемент)
	ПоказатьОтчетНаКлиенте();
КонецПроцедуры

&НаСервереБезКонтекста
Функция СоставитьМассив(пМаксимальныйЭлемент, пЭлементов, пШаг = 1)
	вМассив = Новый Массив;
	мЭлемент = пМаксимальныйЭлемент;
	
	Пока вМассив.Количество() < пЭлементов Цикл
		вМассив.Добавить(мЭлемент);
		мЭлемент = мЭлемент - пШаг;
	КонецЦикла;
	вМассив.Вставить(0, 0);
	Возврат вМассив;
КонецФункции

&НаСервере
Функция ПолучитьДанныеAPI(Сервер,порт,имяБазы)
	
	мСоединение = Новый HTTPСоединение(
									Сервер, // сервер (хост)
									Порт, // порт, по умолчанию для http используется 80, для https 443
									"SERV", // пользователь для доступа к серверу (если он есть)
									"SERVgfhjkm", // пароль для доступа к серверу (если он есть)
									, // здесь указывается прокси, если он есть
									11, // таймаут в секундах, 0 или пусто - не устанавливать
									// защищенное соединение, если используется https
									);
	
	мЗапрос = Новый HTTPЗапрос("/" + ИмяБазы + "/hs/prjapi/DATAPROZR");
	мРезультат = мСоединение.GET(мЗапрос);
	
	Если мРезультат.КодСостояния <> 200 Тогда 
		Сообщить("Ошибка отправки: " + мРезультат.КодСостояния);
		Сообщить(мРезультат.ПолучитьТелоКакСтроку());
		Возврат Неопределено;
	КонецЕсли;
	
	мЗначение = XMLЗначение(Тип("ХранилищеЗначения"), мРезультат.ПолучитьТелоКакСтроку()).Получить();
	
	тбл = мЗначение[1];
	
	
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗапуститьПолучениеДанныхВФоне(Стр)
	
	п = СтрЗаменить(Стр.ВнутреннийАдрес,":",Символы.ПС);
	Сервер = СтрПолучитьСтроку(п,1);
	порт = СтрПолучитьСтроку(п,2);
	Если порт = "" ТОгда Порт = "80"; КонецЕсли;
	порт = Число(порт);
	
	
	АдресВХранилище = ПоместитьВоВременноеХранилище(Неопределено,Новый УникальныйИдентификатор);
	
	масПар = Новый Массив;
	масПар.Добавить(Сервер);
	масПар.Добавить(Порт);
	масПар.Добавить("/"+Стр.APIrestENT+"/hs/prjapi/DATAPROZR");
	масПар.Добавить(АдресВХранилище);
	масПар.Добавить(Неопределено);
	
	фз = ФоновыеЗадания.Выполнить("глСервер.выполнитьAPI",масПар, АдресВХранилище);
	
	Стр.Ключ = АдресВХранилище;
	Стр.ид = фз.УникальныйИдентификатор;
	Стр.Выполнено = Ложь;
	
КонецПроцедуры      

&НаСервере
Процедура ДобавитьОрганизациюВМассивОпроса(пИмяОрганизации, пАдресБазыПутевыхЛистов, пАдресБазыБухгалтерии = Неопределено, пИмяБазыПутевыхЛистов, пИмяБазыБухгалтерии)
	мНоваяСтрока = тблБаз.Добавить();
	мНоваяСтрока.Наименование 	= пИмяОрганизации;
	мНоваяСтрока.ВнутреннийАдрес 	= пАдресБазыПутевыхЛистов;
	мНоваяСтрока.ВнутреннийАдресБух = ?(пАдресБазыБухгалтерии = Неопределено, пАдресБазыПутевыхЛистов, пАдресБазыБухгалтерии);
	мНоваяСтрока.APIrestENT 		= пИмяБазыПутевыхЛистов;
	мНоваяСтрока.APIrest 			= пИмяБазыБухгалтерии;
	
	мДеклорацияОрганизации = Элементы.Добавить("элФ" + тблБаз.Индекс(мНоваяСтрока),Тип("ДекорацияФормы"), Элементы.грпОрг);
	мДеклорацияОрганизации.Заголовок = пИмяОрганизации;
	мДеклорацияОрганизации.ЦветТекста = WebЦвета.Серый;
КонецПроцедуры

&НаСервере
Процедура ОбновитьТблДанные()
	
	ДобавитьОрганизациюВМассивОпроса("ООО 'НСТ'", "192.168.50.11", , "ENT", "BUH");
	ДобавитьОрганизациюВМассивОпроса("ООО 'МТС'", "192.168.50.11", , "ENTMTS", "BuhMTS");
	ДобавитьОрганизациюВМассивОпроса("ООО 'НВДС'", "192.168.20.13", , "ENT", "buh");
	ДобавитьОрганизациюВМассивОпроса("ООО 'МТК'", "192.168.90.7", , "Proizv", "BUH");
	ДобавитьОрганизациюВМассивОпроса("ООО 'УТТ-Восток'", "192.168.83.9", , "EntUTT", "BuhUTT");
	ДобавитьОрганизациюВМассивОпроса("ООО 'ЧАТ'", "10.8.85.12", , "chat_pl", "chat_bp");
	ДобавитьОрганизациюВМассивОпроса("ООО 'СТ'", "172.20.0.3", , "ST_ENT", "ST_BUH");
	ДобавитьОрганизациюВМассивОпроса("ООО 'ТС'", "192.168.130.8", "azure1c.westeurope.cloudapp.azure.com", "Ent_TS", "BuhTS");
	
	Для каждого Стр из  тблБаз Цикл
		ЗапуститьПолучениеДанныхВФоне(Стр);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТблВМасСтк(Тбл) Экспорт
	
	Рез = новый Массив;
	
	сткСтр = "";
	Для каждого Кол из ТБл.Колонки Цикл
		СткСтр = СткСтр+","+Кол.Имя;
	КонецЦикла;
	СткСтр = Сред(СткСтр,2);
	
	Для каждого Стр из Тбл Цикл
		Стк = Новый Структура(СткСтр);
		ЗаполнитьЗначенияСвойств(Стк,Стр);
		Рез.Добавить(Стк);
	КонецЦикла;
	
	Возврат Рез;
	
КонецФункции
	
&НаСервереБезКонтекста
Функция ПроверитьФоновыеЗадания(идФЗ)

	рез =Неопределено;
	
	фз = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(идФЗ);
	
	Если фз<>Неопределено Тогда
		ЕСли фз.Состояние=СостояниеФоновогоЗадания.Завершено Тогда
			РезФЗ = ПолучитьИзВременногоХранилища(фз.Ключ);
			Если резФЗ<>Неопределено Тогда
				рез = ТблВМасСтк(резФЗ[1]);
			ИНаче
				Рез = Ложь;
			КонецеСЛИ;
		КонецЕсли;
	КонецеСЛИ;
	
	Возврат Рез;
	
КонецФункции

&НаКлиенте
Процедура МониторингФоновыхЗаданий() Экспорт
	
	ЕстьНеВыполнено = Ложь;
	ЕстьИзмТблДата  = Ложь;
	ДЛя каждого Стр из тблБаз Цикл
		Если Стр.Выполнено Тогда Продолжить; КонецЕСлИ;
		
		рез = ПроверитьФоновыеЗадания(Стр.ид);
		Если Рез = Ложь Тогда //Ошибка в получении данных
			Стр.колПопыток = Стр.колПопыток+1;
			ЕСли Стр.колПопыток > 5 Тогда
				Стр.выполнено = Истина;
			ИНаче
				Стк = Новый Структура("ВнутреннийАдрес,APIrestENT,Ключ,ид,Выполнено");
				ЗаполнитьЗначенияСвойств(Стк,Стр);
				ЗапуститьПолучениеДанныхВФоне(Стк);
				ЗаполнитьЗначенияСвойств(Стр,Стк);
				
				текЭл = Элементы["ЭлФ"+тблБаз.Индекс(Стр)];
				текЭл.Заголовок = Стр.Наименование+" ("+Стр.колПопыток+")";
			КонецеСЛИ;
		ИНачеЕсли типЗнч(Рез) = Тип("Массив") Тогда
			Стр.Выполнено = Истина;
			
			Для каждого Стк из рез Цикл
				новСтр = тблДата.Добавить();
				ЗаполнитьЗначенияСвойств(новСтр,Стк);
				ЗаполнитьЗначенияСвойств(новСтр,Стр);
				
			КонецЦикла;
			
			ЕстьИзмТблДата = Истина;
			
			Элементы["ЭлФ"+тблБаз.Индекс(Стр)].ЦветТекста = WebЦвета.СинеСерый;

		КонецеСЛИ;
		
		Если Стр.Выполнено = Ложь Тогда
			ЕстьНеВыполнено = Истина;
		КонецесЛИ;
	Конеццикла;
	
	Если ЕстьНеВыполнено=Ложь Тогда
		ОтключитьОбработчикОжидания("МониторингФоновыхЗаданий");
	КонецЕСЛИ;
	
	Если ЕстьИзмТблДата Тогда
		ОбновитьКнопки();
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ОбновитьТблДанные();
	
	мМассивЛет = СоставитьМассив(Год(ТекущаяДата()), 50);
	//мМассивПростоев = СоставитьМассив(36, 6, 6);
	Элементы.фФильтрГодВыпускаС.СписокВыбора.ЗагрузитьЗначения(мМассивЛет);
	Элементы.фФильтрГодВыпускаПо.СписокВыбора.ЗагрузитьЗначения(мМассивЛет);
	
	//Элементы.ГруппаСтраницыФильтры.ТекущаяСтраница = Элементы.СтраницаФильтрыСкрыты;
	
	мОбъект = РеквизитФормыВЗначение("Объект");
	фМакет = мОбъект.ПолучитьМакет("Макет");
	
	СтрКолонокТблДата = ПолучитьСтрКолонокТблДата();
	Элементы["ФильтрВПростое00"].ЦветФона = WebЦвета.БледноЗеленый;
	ОбновитьКнопкиИнтерфейса();	//динамические группы и кнопки
КонецПроцедуры

Функция ПолучитьДанныеПоРодителям()
	мЗапрос = Новый Запрос("ВЫБРАТЬ
	|	уатТипыТС2.Родитель.Код,
	|	уатТипыТС2.Родитель.ИмяПредопределенныхДанных КАК Род1,
	|	уатТипыТС2.Наименование КАК Род2,
	|	"""" КАК Порядок
	|ИЗ
	|	Справочник.уатТипыТС КАК уатТипыТС
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатТипыТС КАК уатТипыТС2
	|		ПО (уатТипыТС2.Родитель = уатТипыТС.Ссылка)
	|ГДЕ
	|	уатТипыТС2.ЭтоГруппа
	|	И уатТипыТС.Родитель = ЗНАЧЕНИЕ(Справочник.уатТипыТС.ПустаяСсылка)
	|УПОРЯДОЧИТЬ ПО уатТипыТС2.Родитель.Наименование ВОЗР");
	Возврат мЗапрос.Выполнить().Выгрузить();
КонецФункции

&НаСервере
Функция ДобавитьГруппу(пИмя, пРодитель, пГоризонтальная = Ложь, пВыделить = Ложь, пЗаголовок = "")
	мНоваяГруппа = Элементы.Добавить(пИмя, Тип("ГруппаФормы"), пРодитель);
	мНоваяГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	мНоваяГруппа.Отображение = ?(пВыделить, ОтображениеОбычнойГруппы.Нет, ОтображениеОбычнойГруппы.Нет);
	мНоваяГруппа.Заголовок = пЗаголовок;
	мНоваяГруппа.ОтображатьЗаголовок = ?(пЗаголовок <> "", Истина, Ложь);
	мНоваяГруппа.Группировка = ?(пГоризонтальная, ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная, ГруппировкаПодчиненныхЭлементовФормы.Вертикальная);
	мНоваяГруппа.ГоризонтальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Половинный;
	мНоваяГруппа.ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Половинный;
	мНоваяГруппа.РастягиватьПоВертикали = Ложь;
	мНоваяГруппа.РастягиватьПоГоризонтали = Истина;
	
	//мНоваяГруппа.ГоризонтальноеПоложение
	//мНоваяГруппа.ГоризонтальноеПоложениеВГруппе
	//мНоваяГруппа.ВертикальноеПоложение
	//мНоваяГруппа.ВертикальноеПоложениеВГруппе
	Возврат мНоваяГруппа;
КонецФункции

&НаСервере
Процедура РаспределитьКнопкиПоГруппам(пИмяГруппБезИндекса, пКоличествоГрупп, пМассивИмен, пИмяРодителяВерхнегоУровня, пИмяКоманды)
	мИндекс = 0;
	мДелитель = Цел(пМассивИмен.Количество() / пКоличествоГрупп);
	мДелитель = ?(пМассивИмен.Количество() % пКоличествоГрупп = 0, мДелитель, мДелитель + 1);
	Для Каждого мЭлемент Из пМассивИмен Цикл
		//по индексу определим группу
		мИмяГруппы = пИмяГруппБезИндекса + (Цел(мИндекс / мДелитель) + 1);
		ДобавитьКнопку("" + пИмяРодителяВерхнегоУровня + (мИндекс + 1), "" + мЭлемент, мИмяГруппы, пИмяКоманды, мЭлемент, 3);
		//НовыйЭлемент = ЭтаФорма.Элементы.Добавить("" + пИмяРодителяВерхнегоУровня + (мИндекс + 1), Тип("КнопкаФормы"), Элементы[мИмяГруппы]);
		//НовыйЭлемент.Заголовок = "" + мЭлемент.Наименование;
		//НовыйЭлемент.Ширина = 25;
		//НовыйЭлемент.Высота = 3;
		//НовыйЭлемент.ВысотаЗаголовка = 3;
		//НовыйЭлемент.ИмяКоманды = пИмяКоманды;
		Если (мИндекс + 1) <> пМассивИмен.Количество() Тогда
			ДобавитьРастяжитель("РВ" + пИмяРодителяВерхнегоУровня + мИндекс, Элементы[мИмяГруппы], Истина)
		КонецЕсли;
		мИндекс = мИндекс + 1;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ДобавитьКнопку(пИмя, пЗаголовок, пИмяГруппы, пИмяКоманды, пТекстПодсказки = "", пВысота)
	мШирина = 20;
	НовыйЭлемент = ЭтаФорма.Элементы.Добавить(пИмя, Тип("КнопкаФормы"), Элементы[пИмяГруппы]);
	НовыйЭлемент.Заголовок = "" + пЗаголовок;
	НовыйЭлемент.Ширина = мШирина;
	НовыйЭлемент.Высота = пВысота;
	НовыйЭлемент.АвтоМаксимальнаяШирина = Ложь;
	НовыйЭлемент.МаксимальнаяШирина = мШирина;
	НовыйЭлемент.ВысотаЗаголовка = пВысота;
	НовыйЭлемент.АвтоМаксимальнаяВысота = Ложь;
	НовыйЭлемент.ЦветФона = WebЦвета.НасыщенноНебесноГолубой;
	НовыйЭлемент.ЦветРамки = WebЦвета.НасыщенноНебесноГолубой;
	НовыйЭлемент.ЦветТекста = WebЦвета.СеребристоСерый;
	НовыйЭлемент.Шрифт = Новый Шрифт(НовыйЭлемент.Шрифт, , 10, Истина);
	НовыйЭлемент.РасширеннаяПодсказка.Заголовок = пТекстПодсказки;
	НовыйЭлемент.МаксимальнаяВысота = пВысота;
	НовыйЭлемент.ИмяКоманды = пИмяКоманды;
	НовыйЭлемент.РастягиватьПоГоризонтали = Ложь;
	НовыйЭлемент.РастягиватьПоВертикали = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКнопки()
	//отменено
КонецПроцедуры

&НаСервере
Процедура ДобавитьРастяжитель(пИмя, пГруппа, пВертикально = Ложь)
	НовыйЭлемент = ЭтаФорма.Элементы.Добавить(пИмя, Тип("ДекорацияФормы"), пГруппа);
	НовыйЭлемент.Вид = ВидДекорацииФормы.Надпись;
	НовыйЭлемент.Заголовок = " ";
	Если пВертикально Тогда
		НовыйЭлемент.Высота = 1;
		НовыйЭлемент.АвтоМаксимальнаяВысота = Ложь;
		НовыйЭлемент.МаксимальнаяВысота = 10;
		НовыйЭлемент.РастягиватьПоВертикали = Истина;
	Иначе
		НовыйЭлемент.Ширина = 1;
		НовыйЭлемент.АвтоМаксимальнаяШирина = Ложь;
		НовыйЭлемент.МаксимальнаяШирина = 100;
		НовыйЭлемент.РастягиватьПоГоризонтали = Истина;
	Конецесли
КонецПроцедуры

&НаСервере
Процедура ОбновитьКнопкиИнтерфейса()
	
	Справочники.уатТипыТС.СинхроТипы();	//синхронизация - гарантия наличия всех типов в справочнике уатТипыТС
	
	мТаблицаРодителей = ПолучитьДанныеПоРодителям();
	мПорядокРодителейВерхнегоУровня = Новый Соответствие;
	мПорядокРодителейВерхнегоУровня.Вставить(Справочники.уатТипыТС.Легковые.Наименование, "1");
	мПорядокРодителейВерхнегоУровня.Вставить(Справочники.уатТипыТС.Автобусы.Наименование, "2");
	мПорядокРодителейВерхнегоУровня.Вставить(Справочники.уатТипыТС.Грузовые.Наименование, "3");
	мПорядокРодителейВерхнегоУровня.Вставить(Справочники.уатТипыТС.Спецтехника.Наименование, "4");
	мПорядокРодителейВерхнегоУровня.Вставить(Справочники.уатТипыТС.Экскаваторы.Наименование, "5");
	мПорядокРодителейВерхнегоУровня.Вставить(Справочники.уатТипыТС.Трактора.Наименование, "6");
	мПорядокРодителейВерхнегоУровня.Вставить(Справочники.уатТипыТС.ПрицепыИПолуприцепы.Наименование, "7");
	мПорядокРодителейВерхнегоУровня.Вставить(Справочники.уатТипыТС.Прочие.Наименование, "8");
	мПорядокРодителейВерхнегоУровня.Вставить(Справочники.уатТипыТС.ОбородованиеСобственныеНужды.Наименование, "9");
	мКопияТаблицаРодителей = мТаблицаРодителей.Скопировать();
	мКопияТаблицаРодителей.Свернуть("Род1, Порядок");
	Для Каждого мСтрока Из мКопияТаблицаРодителей Цикл
		мПорядокПоСоответствию = мПорядокРодителейВерхнегоУровня.Получить(мСтрока.Род1);
		мСтрока.Порядок = ?(мПорядокПоСоответствию = Неопределено, "99", мПорядокПоСоответствию);
	КонецЦикла;
	мКопияТаблицаРодителей.Сортировать("Порядок ВОЗР");
	
	мСоответствиеТиповРодителямВерхнегоУровня = Новый Соответствие;
	мМассивРодителейВНаличии = Новый Массив;
	Для каждого мСтрокаРодителей из мТаблицаРодителей Цикл
		Если мМассивРодителейВНаличии.Найти(мСтрокаРодителей.Род1) = Неопределено Тогда
			мМассивРодителейВНаличии.Добавить(мСтрокаРодителей.Род1);
		КонецЕсли;
		мМассивТипов = мСоответствиеТиповРодителямВерхнегоУровня.Получить(мСтрокаРодителей.Род1);
		мДобавляем = Ложь;
		Если мМассивТипов = Неопределено Тогда
			мМассивТипов = Новый Массив;
			мДобавляем = Истина;
		ИначеЕсли мМассивТипов.Найти(мСтрокаРодителей.Род2) = Неопределено Тогда
		 	мДобавляем = Истина;
		КонецЕсли;
		Если мДобавляем Тогда
			мМассивТипов.Добавить(мСтрокаРодителей.Род2);
			мСоответствиеТиповРодителямВерхнегоУровня.Вставить(мСтрокаРодителей.Род1, мМассивТипов);
		КонецЕсли;
	КонецЦикла;
	//сначала группы
	//число отдельных групп
	мЧислоРодителейПервогоУровня = мМассивРодителейВНаличии.Количество();
	//число групп, расположенных вертикально по 2 в ряд
	мЧислоДвойныхГрупп = ?((мЧислоРодителейПервогоУровня % 2) = 0, (мЧислоРодителейПервогоУровня / 2), Цел(мЧислоРодителейПервогоУровня / 2) + 1);
	//ДобавитьРастяжитель("Р0", Элементы.ГруппаСтолбцов);
	Для Итр = 1 По 2 Цикл
		мНоваяГруппа = ДобавитьГруппу("ГруппаВД" + Итр, Элементы.ГруппаСтолбцов, Истина);
		//создаем вложенные вертикальные группы
		Для Джитр = 1 По мЧислоДвойныхГрупп Цикл
			ДобавитьРастяжитель("РВ" + Итр + Джитр, мНоваяГруппа, Ложь);
			мИндекс = ((Итр - 1) * мЧислоДвойныхГрупп) + Джитр;
			Если мИндекс > мМассивРодителейВНаличии.Количество() Тогда
				Прервать;
			КонецЕсли;
			мРодительВерхнегоУровня = мКопияТаблицаРодителей[(мИндекс - 1)].Род1;
			мПорядокРодителяВерхнегоУровня = мПорядокРодителейВерхнегоУровня.Получить(Справочники.уатТипыТС[мРодительВерхнегоУровня]);
			мПодГруппа = ДобавитьГруппу("ГруппаВ" + мИндекс + Итр, мНоваяГруппа, Ложь, Истина, "" + ?(мПорядокРодителяВерхнегоУровня = Неопределено, "", мПорядокРодителяВерхнегоУровня + ". ") + Справочники.уатТипыТС[мРодительВерхнегоУровня].Наименование);
			мПодГруппа.ЦветТекстаЗаголовка = WebЦвета.СеребристоСерый;
			мПодГруппа.ШрифтЗаголовка = Новый Шрифт(мПодГруппа.ШрифтЗаголовка, , 12, Истина);
			мПодГруппа.Высота = 25;
			
			ДобавитьРастяжитель("РГ" + Итр + Джитр, мНоваяГруппа, Ложь);
			
			//внутри каждой группы создаем гор.группу и кнопку "Все"
			мГорГруппа = ДобавитьГруппу("ГруппаГ" + мИндекс, мПодГруппа, Истина);
			//внутри горизонтальной - 2 вертикальных колонки для кнопок
			мВложеннаяПодГруппа = ДобавитьГруппу("ГруппаВВ" + мИндекс + "1", мГорГруппа);
			мВложеннаяПодГруппа = ДобавитьГруппу("ГруппаВВ" + мИндекс + "2", мГорГруппа);
			////мВложеннаяПодГруппа = ДобавитьГруппу("ГруппаВВ" + мИндекс + "3", мГорГруппа);
			////мВложеннаяПодГруппа = ДобавитьГруппу("ГруппаВВ" + мИндекс + "4", мГорГруппа);
			//распределяем по числу вертикальных групп:
			РаспределитьКнопкиПоГруппам("ГруппаВВ" + мИндекс, 2, мСоответствиеТиповРодителямВерхнегоУровня.Получить(мРодительВерхнегоУровня), мРодительВерхнегоУровня, "ОткрытьОтчет");
			мГорГруппа = ДобавитьГруппу("ГруппаГГ" + мИндекс, мПодГруппа, Истина);
			ДобавитьКнопку("" + мРодительВерхнегоУровня + "0", "Все", "ГруппаГГ" + мИндекс, "ОткрытьОтчет", "Все ТС в группе '" + мРодительВерхнегоУровня + "'", 2);
			Если мРодительВерхнегоУровня = "Прочие" Тогда
				ДобавитьКнопку("" + мРодительВерхнегоУровня + "П", "Прочие", "ГруппаГГ" + мИндекс, "ОткрытьОтчет", "Все ТС без группы", 2);
			КонецЕсли;
		КонецЦикла;
		//Если Итр <> мЧислоДвойныхГрупп Тогда
		//	ДобавитьРастяжитель("РГ" + Итр, Элементы.ГруппаСтолбцов);
		//КонецЕсли;
	КонецЦикла;
	
	Элементы.Группа1.Видимость = Ложь;
	//фСоответствиеТиповРодителямВерхнегоУровня = Новый ФиксированноеСоответствие(мСоответствиеТиповРодителямВерхнегоУровня);
КонецПроцедуры

&НаСервере
Функция ПолучитьСтрКолонокТблДата()
	
	РеквизитыТаблицы = ЭтаФорма.ПолучитьРеквизиты("тблДата");
	текСтр = "";
	Для каждого Реквизит из РеквизитыТаблицы Цикл
		текСтр = текСтр+","+Реквизит.Имя;
	КонецЦикла;	
	
	Возврат Сред(текСтр,2);
	
КонецФункции

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПодключитьОбработчикОжидания("МониторингФоновыхЗаданий",1);
	//ОбновитьЭлементыФильтров("ФильтрВПростое");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчет(пИмяОтчета)
	
	мТекущийЭлемент = ЭтаФорма.ТекущийЭлемент;
	мИмяКнопки = мТекущийЭлемент.Имя;
	мСимволСправа = Прав(мИмяКнопки, 1);
	фИндексКнопки = мСимволСправа;
	//получим родителя 1 уровня, т.к. он нужен в любом случае
	//мИмяРодителя = СтрЗаменить(мТекущийЭлемент.Родитель.Родитель.Родитель.Имя, "Группа", "");//можно так, если нужен другой заголовок родителя в группе на форме
	фРодитель = СтрЗаменить(мИмяКнопки, мСимволСправа, "");
	фРодительВторогоУровня = мТекущийЭлемент.Заголовок;
	//
	//фРодитель = мТекущийЭлемент.Родитель.Родитель.Родитель.Заголовок;//или так, если строка заголовка совпадает с названием родителя
	ПоказатьОтчетНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОтчетНаКлиенте()
	Если фИндексКнопки = "П" Тогда
		ПоказатьОтчет(Неопределено, "", фФильтрНаКонсервации);
	ИначеЕсли фИндексКнопки = "0" Тогда
		ПоказатьОтчет(фРодитель, Неопределено, фФильтрНаКонсервации);
	Иначе
		ПоказатьОтчет(Неопределено, фРодительВторогоУровня, фФильтрНаКонсервации);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОтчет(пРодитель1, пРодитель2, пПризнакКонсервация)
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаОтчет;
	//Элементы.ГруппаСтраницыФильтры.ТекущаяСтраница = Элементы.СтраницаФильтрыОтображены;
	Элементы.ГруппаКнопкаНазад.Видимость = Истина;
	
	фТабличныйДокумент = СформироватьНаСервере(фМакет, пРодитель1, пРодитель2, пПризнакКонсервация, фФильтрМесяцевПростоя, фФильтрГодВыпускаС, фФильтрГодВыпускаПо);
КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьТабДокумент(пМакет,мРезультат)
	мТабличныйДокумент = Новый ТабличныйДокумент;
	мТабличныйДокумент.АвтоМасштаб = Истина;
	мОбластьВсеЯчейки = мТабличныйДокумент.Область("C1:C100");
	мОбластьВсеЯчейки.ЦветФона = Новый Цвет(49, 89, 123);
	мОбластьВсеЯчейки.ЦветРамки = Новый Цвет(255, 255, 255);
	мОбластьВсеЯчейки.ЦветТекста = Новый Цвет(255, 255, 255);
	
	мОбластьШапкаТаблицы = пМакет.ПолучитьОбласть("Шапка");
	мОбластьГруппа = пМакет.ПолучитьОбласть("Грп");
	мОбластьСтрока = пМакет.ПолучитьОбласть("Строка");
	мОбластьШапкаТаблицы.Параметры.Дт = ТекущаяДата();
	мТабличныйДокумент.Вывести(мОбластьШапкаТаблицы);
	
	мНомерПП = 0;
		
	Для каждого мЭлементМассива Из мРезультат Цикл
		мНомерПП = мНомерПП + 1;
		мОбластьСтрока.Параметры.Заполнить(мЭлементМассива);
		мОбластьСтрока.Параметры.ном = мНомерПП;
		мТабличныйДокумент.Вывести(мОбластьСтрока);
	КонецЦикла;
	
	мТабличныйДокумент.ФиксацияСверху = 3;
	Возврат мТабличныйДокумент;
	
КонецФункции

&НаКлиенте
Функция СформироватьНаСервере(пМакет, пРодитель1, пРодитель2, пПризнакКонсервация, пФильтрМесяцевПростоя, пФильтрГодВыпускаС, пФильтрГодВыпускаПо)
	
	Если пРодитель1 = Неопределено Тогда
		мРезультат = ПолучитьДанные( , пРодитель2, пПризнакКонсервация, пФильтрМесяцевПростоя, пФильтрГодВыпускаС, пФильтрГодВыпускаПо);
	Иначе
		мРезультат = ПолучитьДанные(пРодитель1, Неопределено, пПризнакКонсервация, пФильтрМесяцевПростоя, пФильтрГодВыпускаС, пФильтрГодВыпускаПо);
	КонецЕсли;
	
	Возврат СформироватьТабДокумент(пМакет, мРезультат);
	
КонецФункции

&НаКлиенте
Функция ПолучитьДанные(пРодитель1, пРодитель2, пПризнакКонсервация, пФильтрМесяцевПростоя, пФильтрГодВыпускаС, пФильтрГодВыпускаПо)
	
	мРезультат = Новый Массив;
	Для каждого Стр из тблДата Цикл
		
		Если  пФильтрГодВыпускаС<>0 Тогда
			Если Стр.Годвыпуска < пФильтрГодВыпускаС Тогда Продолжить; КонецЕсли; 
		КонецеСЛИ;
		Если  пФильтрГодВыпускаПо<>0 Тогда
			Если Стр.Годвыпуска > пФильтрГодВыпускаПо Тогда Продолжить; КонецЕсли; 
		КонецеСЛИ;
		
		Если пПризнакКонсервация Тогда
			Если Стр.этоКонсервация = 0 ТОгда Продолжить; КонецЕсли;
		КонецЕсли;
		
		Если Стр.Род1 <> пРодитель1 и пРодитель1 <> Неопределено 	Тогда Продолжить; КонецЕсли;
		Если Стр.Род2 <> пРодитель2 и пРодитель2 <> Неопределено 	Тогда Продолжить; КонецЕсли;
			
		Если пФильтрМесяцевПростоя > Стр.МесяцевПростоя Тогда Продолжить; КонецеСЛИ;
		
		Стк = Новый Структура(СтрКолонокТблДата);
		ЗаполнитьЗначенияСвойств(Стк, Стр);
		Стк.Вставить("нсТблДата", тблДата.индекс(стр));
		мРезультат.Добавить(Стк);
	КонецЦикла;
	
	Возврат мРезультат;
КонецФункции

//&НаКлиенте
//Процедура ОткрытьПоРодителю(Команда)
//	мИмяЭлемента = Этаформа.ТекущийЭлемент.Имя;
//	мПозицияПодчеркивания = СтрНайти(мИмяЭлемента, "_", , 2);
//	Если мПозицияПодчеркивания > 0 Тогда
//		мИмяЭлемента = Лев(мИмяЭлемента, мПозицияПодчеркивания - 1);
//	КонецЕсли;
//	мИмяВидаОбъектаМетаданных = Этаформа.ТекущийЭлемент.Родитель.Заголовок;
//	мФормаИзСоответствия = фСоответствиеИменФорм.Получить(мИмяВидаОбъектаМетаданных);
//	ОткрытьФорму("" + мИмяВидаОбъектаМетаданных + "." + мИмяЭлемента + "." + ?(мФормаИзСоответствия = Неопределено, ".ФормаСписка", мФормаИзСоответствия));	
//КонецПроцедуры

&НаКлиенте
Процедура НадписьЗаголовокКнопкаВыходНажатие(Элемент)
	Выход(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура Выход(Команда)
	мОписаниеОповещенияОбработкаВыбораЗавершениеРаботыСистемы = Новый ОписаниеОповещения("ОбработкаВыбораЗавершениеСистемы", ЭтаФорма);
	ПоказатьВопрос(мОписаниеОповещенияОбработкаВыбораЗавершениеРаботыСистемы , "Завершить работу системы 1С?", РежимДиалогаВопрос.ДаНет);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораЗавершениеСистемы(пРезультат, пДополнительныеПараметры) Экспорт
	Если пРезультат <> Неопределено и пРезультат = КодВозвратаДиалога.Да Тогда
		ЗавершитьРаботуСистемы(Истина, Ложь);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ФильтрПереключить(Команда)
	мИмяЭлемента = Этаформа.ТекущийЭлемент.Имя;
	ЭтаФорма["ф" + мИмяЭлемента] = НЕ ЭтаФорма["ф" + мИмяЭлемента];
	ОбновитьЭлементыФильтров(мИмяЭлемента);
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаОтчет Тогда
		ПоказатьОтчетНаКлиенте();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ФильтрУказатьПростой(Команда)
	Элементы["ФильтрВПростое" + Прав("00" + фФильтрМесяцевПростоя, 2)].ЦветФона = WebЦвета.ЦветМорскойВолныТемный;
	мЗначение = Прав(Этаформа.ТекущийЭлемент.Имя, 2);
	фФильтрМесяцевПростоя = Число(мЗначение);
	Элементы["ФильтрВПростое" + Прав("00" + фФильтрМесяцевПростоя, 2)].ЦветФона = WebЦвета.БледноЗеленый;
	ПоказатьОтчетНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЭлементыФильтров(пИмяЭлемента)
	мРеквизит = ЭтаФорма["ф" + пИмяЭлемента];
	Элементы[пИмяЭлемента].ЦветФона = ?(мРеквизит, WebЦвета.БледноЗеленый, WebЦвета.ЦветМорскойВолныТемный);
	Элементы[пИмяЭлемента].Заголовок = ?(мРеквизит, "Вкл", "Выкл");
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаУправление;
	//Элементы.ГруппаСтраницыФильтры.ТекущаяСтраница = Элементы.СтраницаФильтрыСкрыты;
	Элементы.ГруппаКнопкаНазад.Видимость = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если Не ЗавершениеРаботы И Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаОтчет Тогда
		СтандартнаяОбработка = Ложь;
		Отказ = Истина;
		Назад(Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьТипыТС(Команда)
	ОткрытьФорму("Справочник.уатТипыТС.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура Перезапуск(Команда)
	Закрыть();
	ОткрытьФорму("Обработка.ОберткаПроектПрозрачность.Форма");
КонецПроцедуры

&НаКлиенте
Процедура СбросФильтров(Команда)
	Элементы["ФильтрВПростое" + Прав("00" + фФильтрМесяцевПростоя, 2)].ЦветФона = WebЦвета.ЦветМорскойВолныТемный;
	Элементы["ФильтрВПростое00"].ЦветФона = WebЦвета.БледноЗеленый;
	фФильтрМесяцевПростоя = 0;
	фФильтрГодВыпускаС = 0;
	фФильтрГодВыпускаПо = 0;
	ПоказатьОтчетНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура фТабличныйДокументОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
	СтандартнаяОбработка = Ложь;
	текСтр = тблДата[Расшифровка];
	
	мПараметры = Новый Структура("GUID_ТС", текСтр.GUID_ТС);
	мПараметры.Вставить("ГаражныйНомер", 	текСтр.ГаражныйНомер);
	мПараметры.Вставить("APIrestENT", 		текСтр.APIrestENT);
	мПараметры.Вставить("APIrest", 			текСтр.APIrest);
	мПараметры.Вставить("ВнутреннийАдрес", 	текСтр.ВнутреннийАдрес);
	мПараметры.Вставить("ВнутреннийАдресБух", 	текСтр.ВнутреннийАдресБух);
	
	ОткрытьФорму("ВнешняяОбработка.юкПроектПрозрачность.Форма.ФормаТранспортногоСредства", мПараметры, ЭтаФорма, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры
